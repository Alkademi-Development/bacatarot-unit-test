{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-09T04:26:51.577Z",
    "end": "2023-06-09T04:27:54.087Z",
    "duration": 62510,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c1dbb366-1194-41b5-9afc-0568c560faf3",
      "title": "",
      "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\index.js",
      "file": "\\test\\app\\dashboard\\classroom\\course\\index.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "be092930-a758-42df-b8b0-129835e3d294",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\index.js",
          "file": "\\test\\app\\dashboard\\classroom\\course\\index.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 3238,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await takeScreenshot(driver, path.resolve(`./screenshoot/test/app/Dashboard/Classroom/Course/index/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "9a44f9b3-04a6-49b4-85a7-ca82ed36b365",
              "parentUUID": "be092930-a758-42df-b8b0-129835e3d294",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Mentor - Create Materi from Detail Class from browser chrome",
              "fullTitle": "Course Mentor - Create Materi from Detail Class from browser chrome",
              "timedOut": false,
              "duration": 59269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n\n// Go to application\ndriver = await goToApp(browser, appHost);\nawait driver.manage().window().maximize();\n        \n// login to the application\nerrorMessages = await enterDashboard(driver, user);\n        \n// Aksi Masuk ke dalam halaman class\nawait driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\nlet cardClass = await driver.findElement(By.css(`div.card-class`));\nawait driver.wait(until.stalenessOf(cardClass));\nerrorMessages = await captureConsoleErrors(driver);\n        \n// Aksi mengecek apakah ada card class atau card classnya lebih dari 1\nlet loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\nawait driver.wait(until.stalenessOf(loadingSkeleton))\nlet itemClass = await driver.findElements(By.css(`div.item-class`));\n// Error ketika card classnya kosong\nawait thrownAnError('Item class is empty', itemClass.length == 0);\n        \n// Aksi memilih salah satu card class\nawait itemClass[faker.helpers.arrayElement([0,1,2])].findElement(By.css('h1.title')).click();\n        \n// Aksi mengklik tab materi pada detail class\nlet itemTabs = await driver.findElements(By.css(\".item-tab\"));\nitemTabs[1].findElement(By.css('span')).click();\n        \n// Aksi mengklik button tambah materi\nawait driver.wait(until.elementLocated(By.css(\"i.ri-add-fill\")));\nawait driver.findElement(By.css(\"i.ri-add-fill\")).click();\nawait driver.wait(until.elementLocated(By.css(\".dropdown-menu.dropdown-menu-right\")));\nlet buttonsDropdownItem = await driver.findElements(By.css(\".dropdown-menu.dropdown-menu-right button.dropdown-item\"));\nawait buttonsDropdownItem[2].click();\n        \n// Aksi mengisi form untuk membuat materi baru\nconst { \n    titleCourse,\n    descriptionCourse,\n    standardPassedCourse,\n    typeCourse \n} = await createData(driver);\n        \nlet dataTitleCourse = await titleCourse.getAttribute(\"value\");\n        \n// Periksa apakah semua elemen telah terisi\nconst isAllFilled = await Promise.all([\n    titleCourse.getAttribute('value'),\n    descriptionCourse.getAttribute('value'),\n    standardPassedCourse.getAttribute('value'),\n    typeCourse.getAttribute('value'),\n]).then(values => values.every(value => value !== ''));\n        \nif(isAllFilled) {\n    await driver.findElement(By.css(\"button[type='submit']\")).click();\n    await driver.wait(until.elementLocated(By.css(\".alert.alert-success\")));\n}\nconst alertSuccess = await driver.executeScript(\"return document.querySelectorAll('.alert.alert-success')\");\n        \n// Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\nawait driver.wait(until.elementsLocated(By.css('.card-body')));\nconst courses = await driver.findElements(By.css(\".card-body .header h4.title\"));\nlet findCourse = [];\n\nfor (let index = 0; index < courses.length; index++) {\n    if(await courses[index].getAttribute('innerText') === dataTitleCourse) {\n        findCourse.push(courses[index]);\n    }\n}\n        \nexpect(isAllFilled, 'Expect all input value is filled').to.equal(true);\nexpect(alertSuccess.length, 'Expect show alert success after created a new data').to.equal(1);\nexpect(findCourse.length, 'The data returned should expect one data because it has previously created a new data').to.equal(1);\n        \nconst pageUrl = await driver.getCurrentUrl();\nexpect(pageUrl, 'Expect return or back to detail classroom').to.include('dashboard/classroom');\n                    } catch (error) {\n// console.error(error?.stack?.split('\\n')[1]);\nexpect.fail(error?.stack);\n                    }",
              "err": {},
              "uuid": "12f173fb-0f83-42f9-9cb2-a743d6324cba",
              "parentUUID": "be092930-a758-42df-b8b0-129835e3d294",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "12f173fb-0f83-42f9-9cb2-a743d6324cba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 59269,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "app/dashboard/classroom/course/index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "assetsDir": "..\\..\\..\\..\\..\\testReports\\assets",
        "reportDir": "testReports",
        "reportFilename": "app/dashboard/classroom/course/index",
        "reportPageTitle": "Laporan-Harian-Testing"
      },
      "version": "6.2.0"
    }
  }
}