{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 1,
    "pending": 1,
    "failures": 0,
    "start": "2023-06-09T04:33:04.842Z",
    "end": "2023-06-09T04:34:06.375Z",
    "duration": 61533,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 50,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "29afc893-0eb1-4b23-8c4a-817e5245a7ff",
      "title": "",
      "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\edit.js",
      "file": "\\test\\app\\dashboard\\classroom\\course\\edit.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "27414dfb-2437-49b6-bbfa-a9156449e278",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\edit.js",
          "file": "\\test\\app\\dashboard\\classroom\\course\\edit.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 3354,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await takeScreenshot(driver, path.resolve(`./screenshoot/test/app/Dashboard/Classroom/Course/edit/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\nawait driver.sleep(3000);\nawait driver.manage().deleteAllCookies();\nawait driver.quit();",
              "err": {},
              "uuid": "a2ef3fb0-359d-429e-a3a6-551b2233dc3e",
              "parentUUID": "27414dfb-2437-49b6-bbfa-a9156449e278",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Mentor - Create Materi from Detail Class from browser chrome",
              "fullTitle": "Course Mentor - Create Materi from Detail Class from browser chrome",
              "timedOut": false,
              "duration": 58171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n\n// Go to application\ndriver = await goToApp(browser, appHost);\nawait driver.manage().window().maximize();\n        \n// login to the application\nerrorMessages = await enterDashboard(driver, user);\n        \n// Aksi Masuk ke dalam halaman class\nawait driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\nlet cardClass = await driver.findElement(By.css(`div.card-class`));\nawait driver.wait(until.stalenessOf(cardClass));\nerrorMessages = await captureConsoleErrors(driver);\n        \n// Aksi mengecek apakah ada card class atau card classnya lebih dari 1\nlet loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\nawait driver.wait(until.stalenessOf(loadingSkeleton))\nlet itemClass = await driver.findElements(By.css(`div.item-class`));\n// Error ketika card classnya kosong\nawait thrownAnError('Item class is empty', itemClass.length == 0);\n        \n// Aksi memilih salah satu card class\nawait itemClass[faker.helpers.arrayElement([0,1,2])].findElement(By.css('h1.title')).click();\n        \n// Aksi mengklik tab materi pada detail class\nlet itemTabs = await driver.findElements(By.css(\".item-tab\"));\nitemTabs[1].findElement(By.css('span')).click();\n// Aksi menunggu list materi untuk muncul\nawait driver.wait(until.elementsLocated(By.css('.card-body .header h4.title')));\n// Aksi meng-hover icon edit dan mengkliknya\nlet listCourse = await driver.findElements(By.css('.card-body .header h4.title'));\nlet editCourse = await listCourse[faker.helpers.arrayElement([0, 1, 2])];\nawait driver.actions({async: true}).move({origin: editCourse}).perform();\nawait driver.sleep(5000);\nlet actionBtns = await driver.findElements(By.css('.action-container .action'));\nconst statusDisplayCourse = await driver.executeScript(\n    \"return getComputedStyle(arguments[0]).getPropertyValue('display')\",\n    actionBtns[1]\n);\n// Mengecek jika element berhasil di hover, maka akan di klik\nif(statusDisplayCourse == 'flex') await actionBtns[1].click();\nelse throw new Error('Sorry failed to hover the icon edit of course');\nconst { titleCourse, descriptionCourse } = await editData(driver);\n\nlet dataTitleCourse = await titleCourse.getAttribute(\"value\");\n        \n// Periksa apakah semua elemen telah terisi\nconst isAllFilled = await Promise.all([\n    titleCourse.getAttribute('value'),\n    descriptionCourse.getAttribute('value'),\n]).then(values => values.every(value => value !== ''));\n        \nif(isAllFilled) {\n    await driver.findElement(By.css(\"button[type='submit']\")).click();\n    await driver.wait(until.elementLocated(By.css(\".alert.alert-success\")));\n}\nconst alertSuccess = await driver.executeScript(\"return document.querySelectorAll('.alert.alert-success')\");\n        \n// Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\nawait driver.wait(until.elementsLocated(By.css('.card-body')));\nconst courses = await driver.findElements(By.css(\".card-body .header h4.title\"));\nlet findCourse = [];\n\nfor (let index = 0; index < courses.length; index++) {\n    if(await courses[index].getAttribute('innerText') === dataTitleCourse) {\n        findCourse.push(courses[index]);\n    }\n}\n        \nexpect(isAllFilled, 'Expect all input value is filled').to.equal(true);\nexpect(alertSuccess.length, 'Expect show alert success after created a new data').to.equal(1);\nexpect(findCourse.length, 'The data returned should expect one data because it has previously created a new data').to.equal(1);\n        \nconst pageUrl = await driver.getCurrentUrl();\nexpect(pageUrl, 'Expect return or back to detail classroom').to.include('dashboard/classroom');\n                    } catch (error) {\n// console.error(error?.stack?.split('\\n')[1]);\nexpect.fail(error?.stack);\n                    }",
              "err": {},
              "uuid": "2d62e7d5-a7ff-4a51-8983-eb95eaaab6c2",
              "parentUUID": "27414dfb-2437-49b6-bbfa-a9156449e278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mentor - Check the icon edit and delete from Detail Class from browser chrome",
              "fullTitle": "Course Mentor - Check the icon edit and delete from Detail Class from browser chrome",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3a3cb0d8-11ba-462b-a062-6cc85990c7d2",
              "parentUUID": "27414dfb-2437-49b6-bbfa-a9156449e278",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d62e7d5-a7ff-4a51-8983-eb95eaaab6c2"
          ],
          "failures": [],
          "pending": [
            "3a3cb0d8-11ba-462b-a062-6cc85990c7d2"
          ],
          "skipped": [],
          "duration": 58171,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "app/dashboard/classroom/course/edit",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "assetsDir": "..\\..\\..\\..\\..\\testReports\\assets",
        "reportDir": "testReports",
        "reportFilename": "app/dashboard/classroom/course/edit",
        "reportPageTitle": "Laporan-Harian-Testing"
      },
      "version": "6.2.0"
    }
  }
}