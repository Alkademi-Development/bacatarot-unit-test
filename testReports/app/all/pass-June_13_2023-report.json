{
  "stats": {
    "suites": 4,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-13T01:45:57.637Z",
    "end": "2023-06-13T01:52:06.975Z",
    "duration": 369338,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "28b1fe49-0485-4089-8f26-cfc58a9a75d9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e99b7f9e-36c8-4b96-8254-8c540c7efe24",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\Dashboard\\Classroom\\Course\\create.js",
          "file": "\\test\\app\\Dashboard\\Classroom\\Course\\create.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Course\"",
              "fullTitle": "Course \"after all\" hook in \"Course\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} `);",
              "err": {},
              "uuid": "87b1fead-b118-4f0c-928e-4ec47db56f8b",
              "parentUUID": "e99b7f9e-36c8-4b96-8254-8c540c7efe24",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 4188,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n        console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    }\n});\nawait takeScreenshot(driver, path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`))\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "2ae7a0a5-2470-4bf4-beca-58c0a87780c0",
              "parentUUID": "e99b7f9e-36c8-4b96-8254-8c540c7efe24",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Super Admin - Create Materi from Detail Class from browser firefox",
              "fullTitle": "Course Super Admin - Create Materi from Detail Class from browser firefox",
              "timedOut": false,
              "duration": 72826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\Dashboard\\\\Classroom\\\\Course\\\\create\\\\1.png\"\n}",
              "code": "try {\n                            // Go to application\n                            driver = await goToApp(browser, appHost);\n                            await driver.manage().window().maximize();\n                            errorMessages = await captureConsoleErrors(driver, browser);\n                            await thrownAnError(errorMessages.join(\", \"), errorMessages.length > 0);\n                            // login to the application\n                            errorMessages = await enterDashboard(driver, user, browser, appHost);\n                            await thrownAnError(errorMessages.join(\", \"), errorMessages.length > 0);\n                            // Aksi Masuk ke dalam halaman class\n                            await driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\n                            let cardClass = await driver.findElement(By.css(`div.card-class`));\n                            await driver.wait(until.stalenessOf(cardClass));\n                            errorMessages = await captureConsoleErrors(driver, browser);\n                            // Aksi mengecek apakah ada card class atau card classnya lebih dari 1\n                            let loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\n                            await driver.wait(until.stalenessOf(loadingSkeleton))\n                            let itemClass = await driver.findElements(By.css(`div.item-class`));\n                            // Error ketika card classnya kosong\n                            await thrownAnError('Item class is empty', itemClass.length == 0);\n                            // Aksi memilih salah satu card class\n                            await itemClass[faker.helpers.arrayElement([0, 1, 2])].findElement(By.css('h1.title')).click();\n                            // Aksi mengklik tab materi pada detail class\n                            let itemTabs = await driver.findElements(By.css(\".item-tab\"));\n                            itemTabs[1].findElement(By.css('span')).click();\n                            // Aksi mengklik button tambah materi\n                            await driver.wait(until.elementLocated(By.css(\"i.ri-add-fill\")));\n                            await driver.findElement(By.css(\"i.ri-add-fill\")).click();\n                            await driver.wait(until.elementLocated(By.css(\".dropdown-menu.dropdown-menu-right\")));\n                            let buttonsDropdownItem = await driver.findElements(By.css(\".dropdown-menu.dropdown-menu-right button.dropdown-item\"));\n                            await buttonsDropdownItem[1].click();\n                            // Aksi mengisi form untuk membuat materi baru\n                            const {\n                                titleCourse,\n                                descriptionCourse,\n                                standardPassedCourse,\n                                typeCourse\n                            } = await createData(driver);\n                            let dataTitleCourse = await titleCourse.getAttribute(\"value\");\n                            // Periksa apakah semua elemen telah terisi\n                            const isAllFilled = await Promise.all([\n                                titleCourse.getAttribute('value'),\n                                descriptionCourse.getAttribute('value'),\n                                standardPassedCourse.getAttribute('value'),\n                                typeCourse.getAttribute('value'),\n                            ]).then(values => values.every(value => value !== ''));\n                            if (isAllFilled) {\n                                await driver.findElement(By.css(\"button[type='submit']\")).click();\n                                await driver.wait(until.elementLocated(By.css(\".alert.alert-success\")));\n                            }\n                            const alertSuccess = await driver.executeScript(\"return document.querySelectorAll('.alert.alert-success')\");\n                            \n                            // Aksi menunggu list materi untuk muncul\n                            await driver.wait(until.elementLocated(By.css('#courses .card .card-body .row .col')));\n                            await driver.wait(async function () {\n                                let emptyCourse = await driver.executeScript(\"return document.querySelector('#courses .card .card-body .row .col')\");\n                                const innerText = await emptyCourse?.getAttribute('innerText');\n                                return innerText !== 'Memuat..';\n                            });\n                            \n                            // Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\n                            const courses = await driver.findElements(By.css(\".card-body .header h4.title\"));\n                            let findCourse = [];\n                            for (let index = 0; index < courses.length; index++) {\n                                if (await courses[index].getAttribute('innerText') === dataTitleCourse) {\n                                    findCourse.push(courses[index]);\n                                }\n                            }\n                            expect(isAllFilled, 'Expect all input value is filled').to.equal(true);\n                            expect(alertSuccess.length, 'Expect show alert success after created a new data').to.equal(1);\n                            expect(findCourse.length, 'The data returned should expect one data because it has previously created a new data').to.equal(1);\n                            const pageUrl = await driver.getCurrentUrl();\n                            expect(pageUrl, 'Expect return or back to detail classroom').to.include('dashboard/classroom');\n                        } catch (error) {\n                            // console.error(error?.stack?.split('\\n')[1]);\n                            expect.fail(error?.stack);\n                        }",
              "err": {},
              "uuid": "c7e167ca-e9e6-4590-b604-b1282da21f2e",
              "parentUUID": "e99b7f9e-36c8-4b96-8254-8c540c7efe24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7e167ca-e9e6-4590-b604-b1282da21f2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 72826,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e5852279-0448-42a3-9ff6-11c40c704781",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\Dashboard\\Classroom\\Course\\edit.js",
          "file": "\\test\\app\\Dashboard\\Classroom\\Course\\edit.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Course\"",
              "fullTitle": "Course \"after all\" hook in \"Course\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} `);",
              "err": {},
              "uuid": "ebc09141-53be-4655-85a1-61fe8b262b42",
              "parentUUID": "e5852279-0448-42a3-9ff6-11c40c704781",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 4385,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n        console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    }\n});\nawait takeScreenshot(driver, path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`))\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "3eb8d134-f2ff-41aa-b1b8-e719ec598690",
              "parentUUID": "e5852279-0448-42a3-9ff6-11c40c704781",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Super Admin - Edit Materi from Detail Class from browser firefox",
              "fullTitle": "Course Super Admin - Edit Materi from Detail Class from browser firefox",
              "timedOut": false,
              "duration": 184662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\Dashboard\\\\Classroom\\\\Course\\\\edit\\\\1.png\"\n}",
              "code": "try {\n                            // Go to application\n                            driver = await goToApp(browser, appHost);\n                            await driver.manage().window().maximize();\n                            // login to the application\n                            errorMessages = await enterDashboard(driver, user, browser, appHost);\n                            // Aksi Masuk ke dalam halaman class\n                            await driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\n                            let cardClass = await driver.findElement(By.css(`div.card-class`));\n                            await driver.wait(until.stalenessOf(cardClass));\n                            errorMessages = await captureConsoleErrors(driver, browser);\n                            // Aksi mengecek apakah ada card class atau card classnya lebih dari 1\n                            await driver.wait(until.elementLocated(By.css(`div.b-skeleton`)));\n                            let loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\n                            await driver.wait(until.stalenessOf(loadingSkeleton))\n                            let itemClass = await driver.findElements(By.css(`div.item-class`));\n                            // Error ketika card classnya kosong\n                            await thrownAnError('Item class is empty', itemClass.length == 0);\n                            // Aksi memilih salah satu card class\n                            await itemClass[faker.helpers.arrayElement([0, 1, 2])].findElement(By.css('h1.title')).click();\n                            // Aksi mengklik tab materi pada detail class\n                            let itemTabs = await driver.findElements(By.css(\".item-tab\"));\n                            itemTabs[1].findElement(By.css('span')).click();\n                            // Aksi menunggu list materi untuk muncul\n                            await driver.wait(until.elementLocated(By.css('#courses .card .card-body .row .col')));\n                            await driver.wait(async function () {\n                                let emptyCourse = await driver.executeScript(\"return document.querySelector('#courses .card .card-body .row .col')\");\n                                const innerText = await emptyCourse?.getAttribute('innerText');\n                                return innerText !== 'Memuat..';\n                            });\n                            \n                            // Aksi meng-hover icon edit dan mengkliknya\n                            let listCourse = await driver.executeScript(`return document.querySelectorAll(\".card .card-body .header\")`);\n                            await thrownAnError('Courses on detail classroom is empty', listCourse.length == 0 || listCourse == null);\n                            let editCourse = await listCourse[0];\n                            const actions = driver.actions({ async: true });\n                            await actions.move({ origin: editCourse }).perform();\n                            // Aksi mengecek setting icons pada course muncul atau displaynya flex\n                            let actionBtns = await driver.findElements(By.css('.action-container .action'));\n                            const statusDisplayCourse = await driver.executeScript(\n                                \"return getComputedStyle(arguments[0]).getPropertyValue('display')\",\n                                actionBtns[1]\n                            );\n                            // Mengecek jika element berhasil di hover, maka akan di klik\n                            if (statusDisplayCourse == 'flex') await actionBtns[1].click();\n                            else throw new Error('Sorry failed to hover the icon edit of course');\n                            // Menunggu Element Form Muncul \n                            await driver.wait(until.elementLocated(By.id('Judul Materi *')));\n                            const { titleCourse, descriptionCourse } = await editData(driver);\n                            let dataTitleCourse = await titleCourse.getAttribute(\"value\");\n                            // Periksa apakah semua elemen telah terisi\n                            const isAllFilled = await Promise.all([\n                                titleCourse.getAttribute('value'),\n                                descriptionCourse.getAttribute('value'),\n                            ]).then(values => values.every(value => value !== ''));\n                            if (isAllFilled) {\n                                await driver.findElement(By.css(\"button[type='submit']\")).click();\n                                await driver.wait(until.elementLocated(By.css(\".alert.alert-success\")));\n                            }\n                            const alertSuccess = await driver.executeScript(\"return document.querySelectorAll('.alert.alert-success')\");\n                            \n                            // Aksi menunggu list materi untuk muncul\n                            await driver.wait(until.elementLocated(By.css('#courses .card .card-body .row .col')));\n                            await driver.wait(async function () {\n                                let emptyCourse = await driver.executeScript(\"return document.querySelector('#courses .card .card-body .row .col')\");\n                                const innerText = await emptyCourse?.getAttribute('innerText');\n                                return innerText !== 'Memuat..';\n                            });\n                            \n                            // Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\n                            const courses = await driver.findElements(By.css(\".card-body .header h4.title\"));\n                            let findCourse = [];\n                            for (let index = 0; index < courses.length; index++) {\n                                if (await courses[index].getAttribute('innerText') === dataTitleCourse) {\n                                    findCourse.push(courses[index]);\n                                }\n                            }\n                            expect(isAllFilled, 'Expect all input value is filled').to.equal(true);\n                            expect(alertSuccess.length, 'Expect show alert success after created a new data').to.equal(1);\n                            expect(findCourse.length, 'The data returned should expect one data because it has previously created a new data').to.equal(1);\n                            const pageUrl = await driver.getCurrentUrl();\n                            expect(pageUrl, 'Expect return or back to detail classroom').to.include('dashboard/classroom');\n                        } catch (error) {\n                            // console.error(error?.stack?.split('\\n')[1]);\n                            expect.fail(error?.stack);\n                        }",
              "err": {},
              "uuid": "1dbaff55-0ac6-4e7f-8ecb-2176a4698cb4",
              "parentUUID": "e5852279-0448-42a3-9ff6-11c40c704781",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1dbaff55-0ac6-4e7f-8ecb-2176a4698cb4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 184662,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "96663b5e-fc81-4050-a8ba-28132b8dcec4",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\Dashboard\\Classroom\\Course\\index.js",
          "file": "\\test\\app\\Dashboard\\Classroom\\Course\\index.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Course\"",
              "fullTitle": "Course \"after all\" hook in \"Course\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} `);",
              "err": {},
              "uuid": "48e1e7de-d3df-4b39-99c1-d2ba101f329f",
              "parentUUID": "96663b5e-fc81-4050-a8ba-28132b8dcec4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 4019,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n        console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    }\n});\nawait takeScreenshot(driver, path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`))\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "75a271d8-7f42-4541-ba15-8c51944bc0e4",
              "parentUUID": "96663b5e-fc81-4050-a8ba-28132b8dcec4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Super Admin - Check the icon edit and delete from Detail Class from browser firefox",
              "fullTitle": "Course Super Admin - Check the icon edit and delete from Detail Class from browser firefox",
              "timedOut": false,
              "duration": 63262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\Dashboard\\\\Classroom\\\\Course\\\\index\\\\1.png\"\n}",
              "code": "try {\n                            // Go to application\n                            driver = await goToApp(browser, appHost);\n                            await driver.manage().window().maximize();\n                            // login to the application\n                            errorMessages = await enterDashboard(driver, user, browser, appHost);\n                            // Aksi Masuk ke dalam halaman class\n                            await driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\n                            let cardClass = await driver.findElement(By.css(`div.card-class`));\n                            await driver.wait(until.stalenessOf(cardClass));\n                            errorMessages = await captureConsoleErrors(driver, browser);\n                            // Aksi mengecek apakah ada card class atau card classnya lebih dari 1\n                            await driver.wait(until.elementLocated(By.css(`div.b-skeleton`)));\n                            let loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\n                            await driver.wait(until.stalenessOf(loadingSkeleton))\n                            let itemClass = await driver.findElements(By.css(`div.item-class`));\n                            // Error ketika card classnya kosong\n                            await thrownAnError('Item class is empty', await itemClass.length == 0);\n                            // Aksi memilih salah satu card class\n                            await itemClass[faker.number.int({ min: 0, max: itemClass.length - 1 })].findElement(By.css('h1.title')).click();\n                            // Aksi mengklik tab materi pada detail class\n                            let itemTabs = await driver.findElements(By.css(\".item-tab\"));\n                            itemTabs[1].findElement(By.css('span')).click();\n                            // Aksi menunggu list materi untuk muncul\n                            await driver.wait(until.elementLocated(By.css('#courses .card .card-body .row .col')));\n                            await driver.wait(async function () {\n                                let emptyCourse = await driver.executeScript(\"return document.querySelector('#courses .card .card-body .row .col')\");\n                                const innerText = await emptyCourse?.getAttribute('innerText');\n                                return innerText !== 'Memuat..';\n                            });\n                            \n                            // Aksi meng-hover icon edit dan mengkliknya\n                            let listCourse = await driver.executeScript(`return document.querySelectorAll(\".card .card-body .header\")`);\n                            await thrownAnError('Courses on detail classroom is empty', listCourse.length == 0 || listCourse == null);\n                            let editCourse = await listCourse[0];\n                            const actions = driver.actions({ async: true });\n                            await actions.move({ origin: editCourse }).perform();\n                            let actionBtns = await driver.findElements(By.css('.action-container .action'));\n                            let statusDisplayEditCourse = await driver.executeScript(\n                                \"return getComputedStyle(arguments[0]).getPropertyValue('display')\",\n                                actionBtns[1]\n                            );\n                            let statusDisplayDeleteCourse = await driver.executeScript(\n                                \"return getComputedStyle(arguments[0]).getPropertyValue('display')\",\n                                actionBtns[2]\n                            );\n                            // Mengecek jika element berhasil di hover, maka akan di klik\n                            await thrownAnError('Sorry failed to hover the icon edit & delete of course, because its not displayed', statusDisplayEditCourse != 'flex' && statusDisplayDeleteCourse != 'flex');\n                            expect(statusDisplayEditCourse).to.equal('flex');\n                            expect(statusDisplayDeleteCourse).to.equal('flex');\n                        } catch (error) {\n                            // console.error(error?.stack?.split('\\n')[1]);\n                            expect.fail(error?.stack);\n                        }",
              "err": {},
              "uuid": "9347e35a-a59e-42e6-927c-738837a18ffa",
              "parentUUID": "96663b5e-fc81-4050-a8ba-28132b8dcec4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9347e35a-a59e-42e6-927c-738837a18ffa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 63262,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "145148b5-faf0-4d6e-8e24-9e52ffa3ff80",
          "title": "Login",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\login.js",
          "file": "\\test\\app\\login.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Login\"",
              "fullTitle": "Login \"after all\" hook in \"Login\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} `);",
              "err": {},
              "uuid": "e0964492-67cd-4c80-aefc-091fd73aea90",
              "parentUUID": "145148b5-faf0-4d6e-8e24-9e52ffa3ff80",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Login\"",
              "fullTitle": "Login \"after each\" hook in \"Login\"",
              "timedOut": false,
              "duration": 4308,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n        console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    }\n});\nawait takeScreenshot(driver, path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`))\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "91d63bbc-696c-4c72-971a-006a3f351e34",
              "parentUUID": "145148b5-faf0-4d6e-8e24-9e52ffa3ff80",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "SUPER ADMIN - Login to dashboard from browser firefox",
              "fullTitle": "Login SUPER ADMIN - Login to dashboard from browser firefox",
              "timedOut": false,
              "duration": 31676,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\login\\\\1.png\"\n}",
              "code": "try {\n                            // Go to application\n                            driver = await goToApp(browser, appHost);\n                            await driver.manage().window().maximize();\n                            errorMessages = await captureConsoleErrors(driver, browser);\n                            await thrownAnError(errorMessages.join(\", \"), errorMessages.length > 0);\n                            // login to the application\n                            errorMessages = await enterDashboard(driver, user, browser, appHost);\n                            await thrownAnError(errorMessages.join(\", \"), errorMessages.length > 0);\n                            let textStatus = await driver.executeScript(`return document.querySelectorAll('h1.text-welcome').length`);\n                            // Jalankan skrip JavaScript untuk mengumpulkan data jaringan\n                            const networkData = await driver.executeScript(`\n                                const performanceEntries = performance.getEntriesByType('resource');\n                                const requests = performanceEntries.map(entry => {\n                                    return {\n                                        entry,\n                                        url: entry.name,\n                                        method: entry.initiatorType,\n                                        type: entry.entryType,\n                                    };\n                                });\n                                \n                                return requests;\n                            `);\n                            // Tampilkan data jaringan\n                            let correctUrl = await networkData.find(data => data.url.includes(\"v1/user/me\"));\n                            let userData = await driver.executeScript(\"return window.localStorage.getItem('user')\")\n                            userData = await JSON.parse(userData);\n                            assert.strictEqual(textStatus > 1, textStatus > 1);\n                            expect(correctUrl.url).to.includes(\"v1/user/me\");\n                            expect(userData.id).to.greaterThan(0);\n                        } catch (error) {\n                            expect.fail(error);\n                        }",
              "err": {},
              "uuid": "41f94fd4-16c4-48de-ade9-47781e8a3f07",
              "parentUUID": "145148b5-faf0-4d6e-8e24-9e52ffa3ff80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41f94fd4-16c4-48de-ade9-47781e8a3f07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31676,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "app/all/[status]-[datetime]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "includeScreenshots": "true",
        "timestamp": "longDate",
        "overwrite": "false",
        "reportDir": "testReports",
        "reportFilename": "app/all/[status]-[datetime]-report",
        "reportPageTitle": "Laporan-Harian-Testing",
        "assetsDir": "..\\..\\testReports\\assets"
      },
      "version": "6.2.0"
    }
  }
}