{
  "stats": {
    "suites": 4,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-11T02:14:00.176Z",
    "end": "2023-06-11T02:18:10.729Z",
    "duration": 250553,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c5770223-f169-4855-b0b0-c599926b56ae",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f748ca04-941e-4413-b33c-d014d08b6c6e",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\Dashboard\\Classroom\\Course\\create.js",
          "file": "\\test\\app\\Dashboard\\Classroom\\Course\\create.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Course\"",
              "fullTitle": "Course \"after all\" hook in \"Course\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} \\n`);",
              "err": {},
              "uuid": "12cd9198-39ea-4792-9abf-b06f945f2bc6",
              "parentUUID": "f748ca04-941e-4413-b33c-d014d08b6c6e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 4191,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n      console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    } \n});\nawait takeScreenshot(driver, path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`))\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "8a9aad80-d74d-4934-a6f6-80f7e75a308e",
              "parentUUID": "f748ca04-941e-4413-b33c-d014d08b6c6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Super Admin - Create Materi from Detail Class from browser firefox",
              "fullTitle": "Course Super Admin - Create Materi from Detail Class from browser firefox",
              "timedOut": false,
              "duration": 66752,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\Dashboard\\\\Classroom\\\\Course\\\\create\\\\1.png\"\n}",
              "code": "try {\n                            \n                            // Go to application\n                            driver = await goToApp(browser, appHost);\n                            await driver.manage().window().maximize();\n            \n                            // login to the application\n                            errorMessages = await enterDashboard(driver, user, browser);\n            \n                            // Aksi Masuk ke dalam halaman class\n                            await driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\n                            let cardClass = await driver.findElement(By.css(`div.card-class`));\n                            await driver.wait(until.stalenessOf(cardClass));\n                            errorMessages = await captureConsoleErrors(driver, browser);\n            \n                            // Aksi mengecek apakah ada card class atau card classnya lebih dari 1\n                            let loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\n                            await driver.wait(until.stalenessOf(loadingSkeleton))\n                            let itemClass = await driver.findElements(By.css(`div.item-class`));\n                            // Error ketika card classnya kosong\n                            await thrownAnError('Item class is empty', itemClass.length == 0);\n            \n                            // Aksi memilih salah satu card class\n                            await itemClass[faker.helpers.arrayElement([0,1,2])].findElement(By.css('h1.title')).click();\n            \n                            // Aksi mengklik tab materi pada detail class\n                            let itemTabs = await driver.findElements(By.css(\".item-tab\"));\n                            itemTabs[1].findElement(By.css('span')).click();\n            \n                            // Aksi mengklik button tambah materi\n                            await driver.wait(until.elementLocated(By.css(\"i.ri-add-fill\")));\n                            await driver.findElement(By.css(\"i.ri-add-fill\")).click();\n                            await driver.wait(until.elementLocated(By.css(\".dropdown-menu.dropdown-menu-right\")));\n                            let buttonsDropdownItem = await driver.findElements(By.css(\".dropdown-menu.dropdown-menu-right button.dropdown-item\"));\n                            await buttonsDropdownItem[1].click();\n            \n                            // Aksi mengisi form untuk membuat materi baru\n                            const { \n   titleCourse,\n   descriptionCourse,\n   standardPassedCourse,\n   typeCourse \n                            } = await createData(driver);\n            \n                            let dataTitleCourse = await titleCourse.getAttribute(\"value\");\n            \n                            // Periksa apakah semua elemen telah terisi\n                            const isAllFilled = await Promise.all([\n   titleCourse.getAttribute('value'),\n   descriptionCourse.getAttribute('value'),\n   standardPassedCourse.getAttribute('value'),\n   typeCourse.getAttribute('value'),\n                            ]).then(values => values.every(value => value !== ''));\n            \n                            if(isAllFilled) {\n   await driver.findElement(By.css(\"button[type='submit']\")).click();\n   await driver.wait(until.elementLocated(By.css(\".alert.alert-success\")));\n                            }\n    \n                            const alertSuccess = await driver.executeScript(\"return document.querySelectorAll('.alert.alert-success')\");\n            \n                            // Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\n                            await driver.wait(until.elementsLocated(By.css('.card-body')));\n                            const courses = await driver.findElements(By.css(\".card-body .header h4.title\"));\n                            let findCourse = [];\n                            \n                            for (let index = 0; index < courses.length; index++) {\n   if(await courses[index].getAttribute('innerText') === dataTitleCourse) {\n       findCourse.push(courses[index]);\n   }\n                            }\n            \n                            expect(isAllFilled, 'Expect all input value is filled').to.equal(true);\n                            expect(alertSuccess.length, 'Expect show alert success after created a new data').to.equal(1);\n                            expect(findCourse.length, 'The data returned should expect one data because it has previously created a new data').to.equal(1);\n            \n                            const pageUrl = await driver.getCurrentUrl();\n                            expect(pageUrl, 'Expect return or back to detail classroom').to.include('dashboard/classroom');\n                        } catch (error) {\n                            // console.error(error?.stack?.split('\\n')[1]);\n                            expect.fail(error?.stack);\n                        }",
              "err": {},
              "uuid": "3627ec76-e52e-49e4-bab5-ed5982761e2e",
              "parentUUID": "f748ca04-941e-4413-b33c-d014d08b6c6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3627ec76-e52e-49e4-bab5-ed5982761e2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 66752,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "f1f5ee4d-5156-44be-bf43-3a58db4e6816",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\Dashboard\\Classroom\\Course\\edit.js",
          "file": "\\test\\app\\Dashboard\\Classroom\\Course\\edit.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Course\"",
              "fullTitle": "Course \"after all\" hook in \"Course\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} \\n`);",
              "err": {},
              "uuid": "bd300bf2-84f4-4688-bdf2-2301f76ac944",
              "parentUUID": "f1f5ee4d-5156-44be-bf43-3a58db4e6816",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 4080,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n      console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    } \n});\nawait takeScreenshot(driver, path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`))\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "2a4410a9-9728-41b4-8ea9-051127faea8f",
              "parentUUID": "f1f5ee4d-5156-44be-bf43-3a58db4e6816",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Super Admin - Edit Materi from Detail Class from browser firefox",
              "fullTitle": "Course Super Admin - Edit Materi from Detail Class from browser firefox",
              "timedOut": false,
              "duration": 76893,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\Dashboard\\\\Classroom\\\\Course\\\\edit\\\\1.png\"\n}",
              "code": "try {\n\n// Go to application\ndriver = await goToApp(browser, appHost);\nawait driver.manage().window().maximize();\n            \n// login to the application\nerrorMessages = await enterDashboard(driver, user, browser);\n            \n// Aksi Masuk ke dalam halaman class\nawait driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\nlet cardClass = await driver.findElement(By.css(`div.card-class`));\nawait driver.wait(until.stalenessOf(cardClass));\nerrorMessages = await captureConsoleErrors(driver, browser);\n            \n// Aksi mengecek apakah ada card class atau card classnya lebih dari 1\nlet loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\nawait driver.wait(until.stalenessOf(loadingSkeleton))\nlet itemClass = await driver.findElements(By.css(`div.item-class`));\n// Error ketika card classnya kosong\nawait thrownAnError('Item class is empty', itemClass.length == 0);\n            \n// Aksi memilih salah satu card class\nawait itemClass[faker.helpers.arrayElement([0,1,2])].findElement(By.css('h1.title')).click();\n            \n// Aksi mengklik tab materi pada detail class\nlet itemTabs = await driver.findElements(By.css(\".item-tab\"));\nitemTabs[1].findElement(By.css('span')).click();\n// Aksi menunggu list materi untuk muncul\nawait driver.wait(until.elementsLocated(By.css('.card-body .header h4.title')));\n// Aksi meng-hover icon edit dan mengkliknya\nlet listCourse = await driver.findElements(By.css('.card .card-body .header'));\nlet editCourse = listCourse[faker.number.int({ min: 0, max: listCourse.length - 1 })];\nconst actions = driver.actions({async: true});\nawait actions.move({origin: editCourse}).perform();\nawait driver.sleep(5000);\n// Aksi mengecek setting icons pada course muncul atau displaynya flex\nlet actionBtns = await driver.findElements(By.css('.action-container .action'));\nconst statusDisplayCourse = await driver.executeScript(\n    \"return getComputedStyle(arguments[0]).getPropertyValue('display')\",\n    actionBtns[1]\n);\n// Mengecek jika element berhasil di hover, maka akan di klik\nif(statusDisplayCourse == 'flex') await actionBtns[1].click();\nelse throw new Error('Sorry failed to hover the icon edit of course');\nconst { titleCourse, descriptionCourse } = await editData(driver);\n\nlet dataTitleCourse = await titleCourse.getAttribute(\"value\");\n            \n// Periksa apakah semua elemen telah terisi\nconst isAllFilled = await Promise.all([\n    titleCourse.getAttribute('value'),\n    descriptionCourse.getAttribute('value'),\n]).then(values => values.every(value => value !== ''));\n            \nif(isAllFilled) {\n    await driver.findElement(By.css(\"button[type='submit']\")).click();\n    await driver.wait(until.elementLocated(By.css(\".alert.alert-success\")));\n}\nconst alertSuccess = await driver.executeScript(\"return document.querySelectorAll('.alert.alert-success')\");\n            \n// Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\nawait driver.wait(until.elementsLocated(By.css('.card-body')));\nconst courses = await driver.findElements(By.css(\".card-body .header h4.title\"));\nlet findCourse = [];\n\nfor (let index = 0; index < courses.length; index++) {\n    if(await courses[index].getAttribute('innerText') === dataTitleCourse) {\n        findCourse.push(courses[index]);\n    }\n}\n            \nexpect(isAllFilled, 'Expect all input value is filled').to.equal(true);\nexpect(alertSuccess.length, 'Expect show alert success after created a new data').to.equal(1);\nexpect(findCourse.length, 'The data returned should expect one data because it has previously created a new data').to.equal(1);\n            \nconst pageUrl = await driver.getCurrentUrl();\nexpect(pageUrl, 'Expect return or back to detail classroom').to.include('dashboard/classroom');\n                        } catch (error) {\n// console.error(error?.stack?.split('\\n')[1]);\nexpect.fail(error?.stack);\n                        }",
              "err": {},
              "uuid": "fdf77bec-bafc-4de4-b403-c8736a0ea53c",
              "parentUUID": "f1f5ee4d-5156-44be-bf43-3a58db4e6816",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fdf77bec-bafc-4de4-b403-c8736a0ea53c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 76893,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "1ab41144-5d63-4716-b590-f2ac38e5f7e8",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\Dashboard\\Classroom\\Course\\index.js",
          "file": "\\test\\app\\Dashboard\\Classroom\\Course\\index.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Course\"",
              "fullTitle": "Course \"after all\" hook in \"Course\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} \\n`);",
              "err": {},
              "uuid": "0a505638-2d1a-4bb5-a273-1c5c7b0d27e2",
              "parentUUID": "1ab41144-5d63-4716-b590-f2ac38e5f7e8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 4162,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n      console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    } \n});\nawait takeScreenshot(driver, path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`))\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "21eba8f8-f3a4-42d8-812a-dccc8215d440",
              "parentUUID": "1ab41144-5d63-4716-b590-f2ac38e5f7e8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Super Admin - Check the icon edit and delete from Detail Class from browser firefox",
              "fullTitle": "Course Super Admin - Check the icon edit and delete from Detail Class from browser firefox",
              "timedOut": false,
              "duration": 56946,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\Dashboard\\\\Classroom\\\\Course\\\\index\\\\1.png\"\n}",
              "code": "try {\n                            \n                            // Go to application\n                            driver = await goToApp(browser, appHost);\n                            await driver.manage().window().maximize();\n                    \n                            // login to the application\n                            errorMessages = await enterDashboard(driver, user, browser);\n                    \n                            // Aksi Masuk ke dalam halaman class\n                            await driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\n                            let cardClass = await driver.findElement(By.css(`div.card-class`));\n                            await driver.wait(until.stalenessOf(cardClass));\n                            errorMessages = await captureConsoleErrors(driver, browser);\n                    \n                            // Aksi mengecek apakah ada card class atau card classnya lebih dari 1\n                            let loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\n                            await driver.wait(until.stalenessOf(loadingSkeleton))\n                            let itemClass = await driver.findElements(By.css(`div.item-class`));\n                            // Error ketika card classnya kosong\n                            await thrownAnError('Item class is empty', itemClass.length == 0);\n                    \n                            // Aksi memilih salah satu card class\n                            await itemClass[faker.helpers.arrayElement([0,1,2])].findElement(By.css('h1.title')).click();\n                    \n                            // Aksi mengklik tab materi pada detail class\n                            let itemTabs = await driver.findElements(By.css(\".item-tab\"));\n                            itemTabs[1].findElement(By.css('span')).click();\n                            \n                            // Aksi menunggu list materi untuk muncul\n                            await driver.wait(until.elementsLocated(By.css('.card .card-body .header')));\n                            \n                            // Aksi meng-hover icon edit dan mengkliknya\n                            let listCourse = await driver.findElements(By.css('.card .card-body .header'));\n                            let editCourse = listCourse[faker.number.int({ min: 0, max: listCourse.length - 1 })];\n                            const actions = driver.actions({async: true});\n                            await actions.move({origin: editCourse}).perform();\n                            await driver.sleep(5000);\n                            \n                            let actionBtns = await driver.findElements(By.css('.action-container .action'));\n                            let statusDisplayEditCourse = await driver.executeScript(\n                                \"return getComputedStyle(arguments[0]).getPropertyValue('display')\",\n                                actionBtns[1]\n                            );\n                            let statusDisplayDeleteCourse = await driver.executeScript(\n                                \"return getComputedStyle(arguments[0]).getPropertyValue('display')\",\n                                actionBtns[2]\n                            );\n                            \n                            // Mengecek jika element berhasil di hover, maka akan di klik\n                            await thrownAnError('Sorry failed to hover the icon edit & delete of course, because its not displayed', statusDisplayEditCourse != 'flex' && statusDisplayDeleteCourse != 'flex');\n                    \n                            expect(statusDisplayEditCourse).to.equal('flex');\n                            expect(statusDisplayDeleteCourse).to.equal('flex');\n                        } catch (error) {\n                            // console.error(error?.stack?.split('\\n')[1]);\n                            expect.fail(error?.stack);\n                        }",
              "err": {},
              "uuid": "7e56a953-6d31-4738-bfe0-2176f5e3e9c1",
              "parentUUID": "1ab41144-5d63-4716-b590-f2ac38e5f7e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e56a953-6d31-4738-bfe0-2176f5e3e9c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 56946,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c234e68c-4449-4099-b648-59ab20e0c7dd",
          "title": "Login",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\login.js",
          "file": "\\test\\app\\login.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Login\"",
              "fullTitle": "Login \"after all\" hook in \"Login\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} \\n`);",
              "err": {},
              "uuid": "896a16cb-f8c6-4734-af37-5b0c6039edb4",
              "parentUUID": "c234e68c-4449-4099-b648-59ab20e0c7dd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Login\"",
              "fullTitle": "Login \"after each\" hook in \"Login\"",
              "timedOut": false,
              "duration": 3958,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n      console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    } \n});\nawait takeScreenshot(driver, path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), path.resolve(`${screenshootFilePath}/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`))\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "97139146-6106-4280-a1c4-fc3fb1e1a484",
              "parentUUID": "c234e68c-4449-4099-b648-59ab20e0c7dd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "SUPER ADMIN - Login to dashboard from browser firefox",
              "fullTitle": "Login SUPER ADMIN - Login to dashboard from browser firefox",
              "timedOut": false,
              "duration": 33563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\login\\\\1.png\"\n}",
              "code": "try {\n\n// Go to application\ndriver = await goToApp(browser, appHost);\nawait driver.manage().window().maximize();\n            \n// login to the application\nerrorMessages = await enterDashboard(driver, user, browser);\n            \nlet textStatus = await driver.executeScript(`return document.querySelectorAll('h1.text-welcome').length`);\n            \n// Jalankan skrip JavaScript untuk mengumpulkan data jaringan\nconst networkData = await driver.executeScript(`\n    const performanceEntries = performance.getEntriesByType('resource');\n    const requests = performanceEntries.map(entry => {\n        return {\n            entry,\n            url: entry.name,\n            method: entry.initiatorType,\n            type: entry.entryType,\n        };\n    });\n    \n    return requests;\n`);\n            \n// Tampilkan data jaringan\nlet correctUrl = await networkData.find(data => data.url.includes(\"v1/user/me\"));\nlet userData = await driver.executeScript(\"return window.localStorage.getItem('user')\")\nuserData = await JSON.parse(userData);\n\nif(errorMessages.length > 0) {\n    throw new Error(errorMessages);\n}\n            \nassert.strictEqual(textStatus > 1, textStatus > 1); \nexpect(correctUrl.url).to.includes(\"v1/user/me\");\nexpect(userData.id).to.greaterThan(0);\n                        } catch (error) {\nexpect.fail(error);\n                        }",
              "err": {},
              "uuid": "87c589c6-2cc3-4ecd-8cb7-64c77a54acf2",
              "parentUUID": "c234e68c-4449-4099-b648-59ab20e0c7dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87c589c6-2cc3-4ecd-8cb7-64c77a54acf2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33563,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "app/all/[status]-[datetime]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "includeScreenshots": "true",
        "timestamp": "longDate",
        "overwrite": "false",
        "reportDir": "testReports",
        "reportFilename": "app/all/[status]-[datetime]-report",
        "reportPageTitle": "Laporan-Harian-Testing",
        "assetsDir": "..\\..\\testReports\\assets"
      },
      "version": "6.2.0"
    }
  }
}