{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-29T08:01:41.282Z",
    "end": "2023-05-29T08:02:37.121Z",
    "duration": 55839,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "371b4797-fbb4-4ecc-998e-2140d15530f8",
      "title": "",
      "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\dashboard\\user\\create.js",
      "file": "\\test\\dashboard\\user\\create.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9b3d26f4-b8a1-48d5-ab4f-3fad8d3c42d3",
          "title": "User",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\dashboard\\user\\create.js",
          "file": "\\test\\dashboard\\user\\create.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User\"",
              "fullTitle": "User \"after each\" hook in \"User\"",
              "timedOut": false,
              "duration": 3108,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "0f312a0d-b02e-4b5d-83d9-d7c4bb705c0b",
              "parentUUID": "9b3d26f4-b8a1-48d5-ab4f-3fad8d3c42d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "(SUCCESS) Create user role admin in dashboard from browser chrome",
              "fullTitle": "User (SUCCESS) Create user role admin in dashboard from browser chrome",
              "timedOut": false,
              "duration": 52702,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Go to application\n            driver = await goToApp(browser, appHost)\n            await driver.manage().window().maximize();\n\n            // login to the application\n            await enterDashboard(driver, user);\n\n\n            // Selections & Actions\n            \n            await driver.findElement(By.css('a > i.ri-icon.ri-user-3-line')).click();\n            await driver.findElement(By.css('button.btn.btn-primary')).click();\n            \n            await driver.wait(until.elementsLocated(By.css(`div.card-wrapper`)));\n            let cardForm = await driver.findElement(By.css('.card-wrapper')).isDisplayed();\n            let cardFormTitle = await driver.findElement(By.css(\".card-wrapper .card .card-header h3\")).getText();\n\n            // Select & Fill the Form\n            await driver.wait(until.elementsLocated(By.css(`div.program-card`)));\n            let selectUserRole = await driver.findElement(By.css(\".program-card\"));\n            await selectUserRole.click();\n            const inputNameLocator = locateWith(By.tagName('input')).above(By.id('name'));\n            const inputEmailLocator = locateWith(By.tagName('input')).above(By.id('email'));\n            const inputTelpLocator = locateWith(By.tagName('input')).above(By.id('phone'));\n            const inputPasswordLocator = locateWith(By.tagName('input')).above(By.id('password'));\n            const inputConfirmPasswordLocator = locateWith(By.tagName('input')).above(By.id('retypepassword'));\n            let inputNameElement = await driver.findElement(inputNameLocator);\n            let inputEmailElement = await driver.findElement(inputEmailLocator);\n            let inputTelpElement = await driver.findElement(inputTelpLocator);\n            let selectGenderInput = await driver.findElement(By.css('.custom-select'));\n            let inputPasswordElement = await driver.findElement(inputPasswordLocator);\n            let inputConfirmPasswordElement = await driver.findElement(inputConfirmPasswordLocator);\n\n            await inputNameElement.sendKeys(faker.person.fullName());\n            let fullName = await inputNameElement.getAttribute('value');\n            await inputEmailElement.sendKeys(fullName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase() + '@gmail.com');\n            await inputTelpElement.sendKeys(faker.phone.number('+62 ### #### ####'));\n            let optionElement = await selectGenderInput.findElement(By.css(`option[value=\"${Math.random() < 0.5 ? 'L' : 'P'}\"]`));\n            await optionElement.click();\n            await inputPasswordElement.sendKeys('semuasama');\n            await inputConfirmPasswordElement.sendKeys('semuasama');\n\n            // Periksa apakah semua elemen telah terisi\n            const isAllFilled = await Promise.all([\ninputNameElement.getAttribute('value'),\ninputEmailElement.getAttribute('value'),\ninputTelpElement.getAttribute('value'),\nselectGenderInput.getAttribute('value'),\ninputPasswordElement.getAttribute('value'),\ninputConfirmPasswordElement.getAttribute('value')\n            ])\n.then(values => values.every(value => value !== ''));\n\n            await driver.findElement(By.css(\"button[type='submit']\")).click();\n            \n            // Get the results\n            let textStatus = await driver.executeScript(`return document.querySelectorAll('h1.text-welcome').length`);\n\n            let userData = await driver.executeScript(\"return window.localStorage.getItem('user')\")\n            userData = JSON.parse(userData);\n            \n            // Result Output\n            assert.strictEqual(textStatus > 1, textStatus > 1); \n            expect(userData.id).to.greaterThan(0);\n            expect(cardForm).to.eq(true);\n            expect(cardFormTitle).to.eq(\"Create Users\");\n\n            expect(await selectUserRole.getAttribute('class')).contain('bg-primary');\n            expect(isAllFilled).to.equal(true);\n            \n            const alertDanger = await driver.findElements(By.css('.alert .alert-danger'));\n            expect(alertDanger.length).to.equal(0);\n\n            const pageUrl = await driver.getCurrentUrl();\n            expect(pageUrl).to.eq(appHost + 'dashboard/users');",
              "err": {},
              "uuid": "2f890ee1-fc4c-487e-a8f1-1084fdfaab90",
              "parentUUID": "9b3d26f4-b8a1-48d5-ab4f-3fad8d3c42d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f890ee1-fc4c-487e-a8f1-1084fdfaab90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 52702,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-results",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "testReports",
        "reportFilename": "test-results",
        "reportPageTitle": "Laporan-Harian-Testing"
      },
      "version": "6.2.0"
    }
  }
}