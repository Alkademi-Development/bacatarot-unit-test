{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-08T06:47:48.136Z",
    "end": "2023-06-08T06:49:21.992Z",
    "duration": 93856,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cab6fef3-2a06-428a-93af-e460fb511fa1",
      "title": "",
      "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\index.js",
      "file": "\\test\\app\\dashboard\\classroom\\course\\index.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "66927311-ce4e-44bb-ac6f-ee1ee9b1e42d",
          "title": "Login",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\index.js",
          "file": "\\test\\app\\dashboard\\classroom\\course\\index.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Login\"",
              "fullTitle": "Login \"after each\" hook in \"Login\"",
              "timedOut": false,
              "duration": 3269,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await takeScreenshot(driver, path.resolve(`./screenshoot/test/app/Dashboard/Classroom/Course/index/${(this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1}.png`));\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "16f0f815-ab6d-4c73-b67c-3e6488bee797",
              "parentUUID": "66927311-ce4e-44bb-ac6f-ee1ee9b1e42d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Login to dashboard from browser chrome",
              "fullTitle": "Login Login to dashboard from browser chrome",
              "timedOut": false,
              "duration": 90556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n\n// Go to application\ndriver = await goToApp(browser, appHost);\nawait driver.manage().window().maximize();\n// login to the application\nerrorMessages = await enterDashboard(driver, user);\n// Aksi Masuk ke dalam halaman class\nawait driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\nlet cardClass = await driver.findElement(By.css(`div.card-class`));\nawait driver.wait(until.stalenessOf(cardClass));\nerrorMessages = await captureConsoleErrors(driver);\n// Aksi mengecek apakah ada card class atau card classnya lebih dari 1\nlet loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\nawait driver.wait(until.stalenessOf(loadingSkeleton))\nlet itemClass = await driver.findElements(By.css(`div.item-class`));\n// Error ketika card classnya kosong\nawait thrownAnError('Item class is empty', itemClass.length == 0);\n// Aksi memilih salah satu card class\nawait itemClass[faker.helpers.arrayElement([0,1,2])].findElement(By.css('h1.title')).click();\n// Aksi mengklik tab materi pada detail class\nlet itemTabs = await driver.findElements(By.css(\".item-tab\"));\nitemTabs[1].findElement(By.css('span')).click();\n// Aksi mengklik button tambah materi\nawait driver.wait(until.elementLocated(By.css(\"i.ri-add-fill\")));\nawait driver.findElement(By.css(\"i.ri-add-fill\")).click();\nawait driver.wait(until.elementLocated(By.css(\".dropdown-menu.dropdown-menu-right\")));\nlet buttonsDropdownItem = await driver.findElements(By.css(\".dropdown-menu.dropdown-menu-right button.dropdown-item\"));\nawait buttonsDropdownItem[1].click();\n// Aksi mengisi form untuk membuat materi baru\nconst { \n    titleCourse,\n    descriptionCourse,\n    standardPassedCourse,\n    typeCourse \n} = await createData(driver);\n// Periksa apakah semua elemen telah terisi\nconst isAllFilled = await Promise.all([\n    titleCourse.getAttribute('value'),\n    descriptionCourse.getAttribute('value'),\n    standardPassedCourse.getAttribute('value'),\n    typeCourse.getAttribute('value'),\n]).then(values => values.every(value => value !== ''));\nif(isAllFilled) {\n    await driver.findElement(By.css(\"button[type='submit']\")).click();\n}\n// Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\nawait driver.wait(until.elementLocated(By.css('.card-body .header')));\nconst courses = await driver.findElements(By.css(\".card-body .header h4.title\"));\nlet findCourse = await courses.filter(async course => await course.getAttribute('value') === titleCourse);\nconsole.log(findCourse);\nconst alertDanger = await driver.findElements(By.css('.alert .alert-danger'));\nexpect(alertDanger.length).to.equal(0);\nexpect(isAllFilled).to.equal(true);\nexpect(findCourse.length).to.greaterThan(0);\nconst pageUrl = await driver.getCurrentUrl();\nexpect(pageUrl).to.include('dashboard/classroom');\n            } catch (error) {\nexpect.fail(error);\n            }",
              "err": {},
              "uuid": "7e8411de-8a83-4695-b0ea-11c6c457fa2e",
              "parentUUID": "66927311-ce4e-44bb-ac6f-ee1ee9b1e42d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e8411de-8a83-4695-b0ea-11c6c457fa2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 90556,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "examples/test-results",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "testReports",
        "reportFilename": "examples/test-results",
        "reportPageTitle": "Laporan-Harian-Testing"
      },
      "version": "6.2.0"
    }
  }
}