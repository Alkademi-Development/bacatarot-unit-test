{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-06T02:09:55.211Z",
    "end": "2023-06-06T02:10:31.133Z",
    "duration": 35922,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "95203a9b-e323-4141-b4ec-92427c054583",
      "title": "",
      "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\login.js",
      "file": "\\test\\login.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5e0b7721-51f8-43c2-8a56-93b166eb58bb",
          "title": "Login",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\login.js",
          "file": "\\test\\login.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook for \"Login to dashboard from browser chrome\"",
              "fullTitle": "Login \"after each\" hook for \"Login to dashboard from browser chrome\"",
              "timedOut": false,
              "duration": 3214,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await driver.sleep(3000);\nlet body = await driver.findElement(By.css(\"body\"));\n// Captures the element screenshot\nlet encodedString = await body.takeScreenshot(true);\nfs.writeFileSync(path.resolve(`./assets/screenshoot/test/login/${this.test.parent.tests.indexOf(this.test)}.png`), encodedString, 'base64');\nawait driver.quit();",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'test')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'test')\n    at Context.<anonymous> (file:///D:/allbasic/nodejs/selenium/testingapp/test/login.js:29:79)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "6340adf9-9706-408f-9cd6-71352e2cc5f1",
              "parentUUID": "5e0b7721-51f8-43c2-8a56-93b166eb58bb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Login to dashboard from browser chrome",
              "fullTitle": "Login Login to dashboard from browser chrome",
              "timedOut": false,
              "duration": 32700,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n\n// Go to application\ndriver = await goToApp(browser, appHost);\n// login to the application\nawait enterDashboard(driver, user);\nlet textStatus = await driver.executeScript(`return document.querySelectorAll('h1.text-welcome').length`);\n// Jalankan skrip JavaScript untuk mengumpulkan data jaringan\nconst networkData = await driver.executeScript(`\n    const performanceEntries = performance.getEntriesByType('resource');\n    const requests = performanceEntries.map(entry => {\n        return {\n            entry,\n            url: entry.name,\n            method: entry.initiatorType,\n            type: entry.entryType,\n        };\n    });\n    \n    return requests;\n`);\n// Tampilkan data jaringan\nlet correctUrl = await networkData.find(data => data.url.includes(\"v1/user/me\"));\nlet userData = await driver.executeScript(\"return window.localStorage.getItem('user')\")\nuserData = await JSON.parse(userData);\n// Tunggu hingga halaman selesai dimuat\nawait driver.wait(async function () {\n    const logs = await driver.manage().logs().get(logging.Type.BROWSER);\n    const errors = logs.filter(entry => entry.level.name === 'SEVERE');\n    return errors.length > 0;\n}, 10000); // Timeout setelah 10 detik\n\n// Ambil log konsol\nconst logs = await driver.manage().logs().get(logging.Type.BROWSER);\nconst errors = logs.filter(entry => entry.level.name === 'SEVERE');\n\n// Tampilkan pesan error\nfor (const error of errors) {\n    console.log('Error:', error.message);\n}\nassert.strictEqual(textStatus > 1, textStatus > 1); \nexpect(correctUrl.url).to.includes(\"v1/user/me\");\nexpect(userData.id).to.greaterThan(0);\n            } catch (error) {\nexpect.fail(error);\n            }",
              "err": {},
              "uuid": "40b6cd9b-6a78-4f2a-8269-f15d44246651",
              "parentUUID": "5e0b7721-51f8-43c2-8a56-93b166eb58bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40b6cd9b-6a78-4f2a-8269-f15d44246651"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32700,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "login.js",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "testReports",
        "reportFilename": "login.js",
        "reportPageTitle": "LOGIN.JS"
      },
      "version": "6.2.0"
    }
  }
}